{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","placeholder","type","room","key","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","message","displayName","onChange","e","target","Button","preventDefault","console","log","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2583f07.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCMAGnyv-WkiSGLZvWiM5J1nVEwzKOWRP0\",\r\n    authDomain: \"whatsapp-clone-b94c7.firebaseapp.com\",\r\n    databaseURL: \"https://whatsapp-clone-b94c7.firebaseio.com\",\r\n    projectId: \"whatsapp-clone-b94c7\",\r\n    storageBucket: \"whatsapp-clone-b94c7.appspot.com\",\r\n    messagingSenderId: \"631038255204\",\r\n    appId: \"1:631038255204:web:bd0f81606327bede9a7f71\",\r\n    measurementId: \"G-9D0S361SZG\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport {auth, provider};\r\nexport default db;","import React from 'react';\r\nimport './SidebarChat.css';\r\nimport { useEffect , useState } from \"react\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport db from \"./firebase\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction SidebarChat({id,name,addNewChat}) {\r\n    const [seed, setSeed] = useState(\"\");\r\n    const [messages, setMessages] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            db.collection('rooms').doc(id).collection('messages').orderBy('timestamp','desc').onSnapshot(snapshot => (\r\n                setMessages(snapshot.docs.map((doc) => doc.data()))\r\n            ))\r\n        }\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random()*5000));\r\n    }, [])\r\n    const createChat = () => {\r\n        const roomName = prompt('Please Enter name for chat room..');\r\n        if (roomName) {\r\n            db.collection('rooms').add({\r\n                name:roomName,\r\n            });\r\n        }\r\n    };\r\n    return !addNewChat ?(\r\n        <Link to={`/rooms/${id}`} >\r\n            <div className=\"sidebarChat\">\r\n            <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n            <div className=\"sidebarChat__info\">\r\n                <h2>{name}</h2>\r\n                <p>{messages[0]?.messages}</p>\r\n            </div>\r\n        </div>\r\n        </Link>\r\n        \r\n        ) : (\r\n            <div onClick = {createChat} className=\"sidebarChat\">\r\n                <h2>Add New Chat</h2>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({reducer, initialState, children}) => (\r\n    <StateContext.Provider value = {useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from 'react'\r\nimport './Sidebar.css';\r\nimport {useEffect,useState} from 'react';\r\nimport { Avatar,IconButton } from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\"\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\r\nimport SidebarChat from './SidebarChat';\r\nimport db from \"./firebase\";\r\nimport { useStateValue } from './StateProvider';\r\n\r\n\r\nfunction Sidebar() {\r\n    const [rooms,setRooms] = useState([]);\r\n    const [{ user }, setUser] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection('rooms').onSnapshot(snapshot => {\r\n            setRooms(snapshot.docs.map(doc => \r\n                ({\r\n                id:doc.id,\r\n                data:doc.data(),\r\n            })\r\n            ))\r\n        })\r\n        return () => {\r\n            unsubscribe();\r\n        }\r\n    },[]);\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__header\">\r\n                <Avatar src={user?.photoURL} />\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton>\r\n                        <DonutLargeIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <ChatIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__search\">\r\n                <div className=\"sidebar__searchContainer\">\r\n                <SearchOutlined />\r\n                <input placeholder=\"Serach out Here..\" type=\"text\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__chats\">\r\n                <SidebarChat addNewChat />\r\n                {rooms.map(room =>(\r\n                    <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react';\r\nimport './Chat.css';\r\nimport { Avatar, IconButton, Button } from \"@material-ui/core\";\r\nimport { useEffect , useState } from \"react\";\r\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\r\nimport AttachFile from \"@material-ui/icons/AttachFile\";\r\nimport MoreVert from \"@material-ui/icons/MoreVert\";\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from './firebase';\r\nimport { useStateValue } from './StateProvider';\r\nimport firebase from 'firebase';\r\n\r\n\r\nfunction Chat() {\r\n    const [input,setInput] =useState(\"\");\r\n    const [seed,setSeed] =useState(\"\");\r\n    const {roomId} = useParams();\r\n    const [roomName,setRoomName] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        if(roomId) {\r\n            db.collection('rooms')\r\n            .doc(roomId)\r\n            .onSnapshot((snapshot) =>\r\n                setRoomName(snapshot.data().name));\r\n            \r\n            db.collection('rooms')\r\n            .doc(roomId)\r\n            .collection('messages')\r\n            .orderBy('timestamp',\"asc\")\r\n            .onSnapshot((snapshot) =>\r\n                    setMessages(snapshot.docs.map(doc => doc.data()))\r\n            );\r\n        }\r\n    }, [roomId])\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random()*5000));\r\n    }, [roomId]);\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"You Typed >>>>\",input);\r\n        db.collection('rooms')\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .add({\r\n            message: input,\r\n            name: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        });\r\n        setInput(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__header\">\r\n                <Avatar  src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n                <div className=\"chat__headerInfo\">\r\n                    <h3>{roomName}</h3>\r\n                    <p>\r\n                        last seen{\" \"}\r\n                        {\r\n                            new Date(\r\n                                messages[messages.length-1]?.timestamp?.toDate()\r\n                            ).toUTCString()\r\n                        }\r\n                    </p>\r\n                    \r\n                </div>\r\n                <div className=\"chat__headerRight\">\r\n                    <IconButton>\r\n                        <SearchOutlined />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <AttachFile />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className=\"chat__body\">\r\n                {messages.map(message => (\r\n                    <p className={`chat__message ${message.name===user.displayName && \"chat__reciever\"}`}>\r\n                    <span className=\"chat__name\">\r\n                        {message.name}\r\n                    </span>\r\n                    {message.message}\r\n                    <span className=\"chat__timestamp\">\r\n                        {new Date(message.timestamp?.toDate())\r\n                        .toUTCString()}\r\n                    </span>\r\n                    </p>\r\n                ))\r\n                }\r\n            </div>\r\n            <div className=\"chat__footer\">\r\n                <InsertEmoticonIcon />\r\n                <form>\r\n                    <input value={input} onChange={(e) => setInput(e.target.value)} placeholder=\"Type a message\" type='text'/>\r\n                    <Button onClick={sendMessage}\r\n                    type=\"submit\">\r\n                        Send a message\r\n                    </Button>\r\n                </form>\r\n                <IconButton>\r\n                    <SendIcon />\r\n                </IconButton>\r\n                <IconButton>\r\n                    <MicIcon />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState = {\r\n    user : null,\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER : \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action);\r\n    switch(action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user : action.user,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport { Button } from \"@material-ui/core\";\r\nimport './Login.css';\r\nimport { auth, provider } from './firebase';\r\nimport { actionTypes } from './reducer';\r\nimport { useStateValue } from './StateProvider'; \r\n\r\nfunction Login() {\r\n    const [{ user }, dispatch] = useStateValue();\r\n    const signIn = () => {\r\n        auth\r\n        .signInWithPopup(provider)\r\n        .then((result) => {\r\n            dispatch({\r\n            type: actionTypes.SET_USER,\r\n            user: result.user,\r\n            });\r\n        })\r\n        .catch((error) => alert(error.message));\r\n    };\r\n    return (\r\n        <div className='login'>\r\n            <div className=\"login__container\">\r\n                <img src='https://seeklogo.net/wp-content/uploads/2013/04/whatsapp-vector-logo-400x400.png' alt='' \r\n                />\r\n                <div className='login__text'>\r\n                    <h1>Sign In to WhatsApp</h1>\r\n                    <h6>Brought you by Rukaiya Anwar</h6>\r\n                </div>\r\n                <Button onClick={signIn}>\r\n                    Sign in with Google\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react';\nimport {useState} from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\nimport {BrowserRouter as Router,Switch,Route} from \"react-router-dom\";\nimport Login from './Login';\nimport { useStateValue } from './StateProvider';\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n  return (\n    //BEM naming conventions\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app__body\">\n          <Router>\n          <Sidebar />\n            <Switch>\n              <Route path='/rooms/:roomId'>\n                <Chat />\n              </Route>\n              <Route path='/'>\n                <Chat />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, {initialState} from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}